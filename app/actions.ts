"use server"

import connectDB from "@/lib/db"
import Appointment from "@/models/Appointment"
import { format } from "date-fns"
import { ru } from "date-fns/locale"
import { appointmentSchema, validateAppointmentSlot, type AppointmentFormData } from "@/lib/validation"
import { generateBookingCode } from "@/lib/utils"
import { ZodError } from "zod"

const escapeMarkdownV2 = (text: string): string => {
  return text.replace(/[_*[\]()~`>#+\-=|{}.!\\]/g, "\\$&")
}

// –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
const ALL_TIME_SLOTS = [
  "09:00",
  "09:30",
  "10:00",
  "10:30",
  "11:00",
  "11:30",
  "12:00",
  "12:30",
  "13:00",
  "13:30",
  "14:00",
  "14:30",
  "15:00",
  "15:30",
  "16:00",
  "16:30",
  "17:00",
  "17:30",
]

export async function createAppointment(formData: AppointmentFormData) {
  try {
    console.log("üöÄ Starting appointment creation process...")

    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validatedData = appointmentSchema.parse(formData)
    console.log("‚úÖ Data validation successful")

    // 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    const appointmentDateTime = validateAppointmentSlot(validatedData.preferredDate, validatedData.preferredTime)

    // 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectDB()
    console.log("‚úÖ Database connection established")

    // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –∑–∞–ø–∏—Å–∏
    let bookingCode: string
    let isCodeUnique = false
    let attempts = 0
    const maxAttempts = 10

    do {
      bookingCode = generateBookingCode()
      const existingCode = await Appointment.findOne({ bookingCode })
      isCodeUnique = !existingCode
      attempts++
    } while (!isCodeUnique && attempts < maxAttempts)

    if (!isCodeUnique) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–ø–∏—Å–∏")
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    const startOfDay = new Date(validatedData.preferredDate)
    startOfDay.setHours(0, 0, 0, 0)
    const endOfDay = new Date(validatedData.preferredDate)
    endOfDay.setHours(23, 59, 59, 999)

    const existingAppointment = await Appointment.findOne({
      preferredDate: {
        $gte: startOfDay,
        $lte: endOfDay,
      },
      preferredTime: validatedData.preferredTime,
      status: "active", // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    })

    if (existingAppointment) {
      console.log("‚ö†Ô∏è Time slot already taken")
      return {
        success: false,
        message: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
      }
    }

    // 6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    const newAppointment = new Appointment({
      name: validatedData.name,
      phone: validatedData.phone,
      email: validatedData.email,
      preferredDate: validatedData.preferredDate,
      preferredTime: validatedData.preferredTime,
      message: validatedData.message,
      bookingCode: bookingCode!,
      status: "active",
    })

    const savedAppointment = await newAppointment.save()
    console.log("‚úÖ Appointment saved to database:", savedAppointment._id)

    // 7. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID

    if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
      try {
        const formattedDate = format(validatedData.preferredDate, "d MMMM yyyy", { locale: ru })
        const telegramMessage = `üéØ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∫ –ª–æ–≥–æ–ø–µ–¥—É*

üë§ *–ò–º—è:* ${escapeMarkdownV2(validatedData.name)}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${escapeMarkdownV2(validatedData.phone)}
üìß *Email:* ${escapeMarkdownV2(validatedData.email || "–ù–µ —É–∫–∞–∑–∞–Ω")}
üìÖ *–î–∞—Ç–∞:* ${escapeMarkdownV2(formattedDate)}
‚è∞ *–í—Ä–µ–º—è:* ${escapeMarkdownV2(validatedData.preferredTime)}
üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${escapeMarkdownV2(validatedData.message || "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")}

üîë *–ö–æ–¥ –∑–∞–ø–∏—Å–∏:* \`${escapeMarkdownV2(bookingCode!)}\`
üÜî *ID –∑–∞–ø–∏—Å–∏:* ${escapeMarkdownV2(savedAppointment._id.toString())}`

        const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: telegramMessage,
            parse_mode: "MarkdownV2",
          }),
        })

        if (response.ok) {
          console.log("‚úÖ Telegram notification sent successfully")
        } else {
          console.warn("‚ö†Ô∏è Telegram notification failed:", await response.text())
        }
      } catch (telegramError) {
        console.error("‚ùå Telegram notification error:", telegramError)
      }
    } else {
      console.warn("‚ö†Ô∏è Telegram credentials not configured")
    }

    return {
      success: true,
      message: "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
      appointmentId: savedAppointment._id.toString(),
      bookingCode: bookingCode!,
    }
  } catch (error) {
    console.error("‚ùå Error creating appointment:", error)

    if (error instanceof ZodError) {
      const errors = error.flatten().fieldErrors
      const errorMessage = Object.values(errors).flat().join("; ")
      return { success: false, message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${errorMessage}` }
    }

    if (error instanceof Error) {
      return { success: false, message: error.message }
    }

    return {
      success: false,
      message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–æ–¥—É
export async function getAppointmentByCode(bookingCode: string) {
  try {
    await connectDB()

    const appointment = await Appointment.findOne({
      bookingCode: bookingCode.toUpperCase(),
    }).select("name preferredDate preferredTime bookingCode status")

    if (!appointment) {
      return {
        success: false,
        message: "–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        appointment: null,
      }
    }

    return {
      success: true,
      appointment: {
        _id: appointment._id.toString(),
        name: appointment.name,
        preferredDate: appointment.preferredDate.toISOString(),
        preferredTime: appointment.preferredTime,
        bookingCode: appointment.bookingCode,
        status: appointment.status,
      },
    }
  } catch (error) {
    console.error("Error fetching appointment by code:", error)
    return {
      success: false,
      message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–∏",
      appointment: null,
    }
  }
}

// –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
export async function cancelAppointment(bookingCode: string) {
  try {
    await connectDB()

    const appointment = await Appointment.findOne({
      bookingCode: bookingCode.toUpperCase(),
      status: "active",
    })

    if (!appointment) {
      return {
        success: false,
        message: "–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
    const appointmentDateTime = new Date(appointment.preferredDate)
    const [hours, minutes] = appointment.preferredTime.split(":").map(Number)
    appointmentDateTime.setHours(hours, minutes, 0, 0)

    if (appointmentDateTime <= new Date()) {
      return {
        success: false,
        message: "–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–æ—à–ª–∞",
      }
    }

    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    appointment.status = "cancelled"
    appointment.cancelledAt = new Date()
    await appointment.save()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ–± –æ—Ç–º–µ–Ω–µ
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID

    if (TELEGRAM_BOT_TOKEN && TELEGRAM_CHAT_ID) {
      try {
        const formattedDate = format(appointment.preferredDate, "d MMMM yyyy", { locale: ru })
        const telegramMessage = `‚ùå *–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏*

üë§ *–ò–º—è:* ${escapeMarkdownV2(appointment.name)}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${escapeMarkdownV2(appointment.phone)}
üìÖ *–î–∞—Ç–∞:* ${escapeMarkdownV2(formattedDate)}
‚è∞ *–í—Ä–µ–º—è:* ${escapeMarkdownV2(appointment.preferredTime)}
üîë *–ö–æ–¥ –∑–∞–ø–∏—Å–∏:* \`${escapeMarkdownV2(appointment.bookingCode)}\`

‚è∞ *–í—Ä–µ–º—è —Ç–µ–ø–µ—Ä—å —Å–≤–æ–±–æ–¥–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤*`

        await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: TELEGRAM_CHAT_ID,
            text: telegramMessage,
            parse_mode: "MarkdownV2",
          }),
        })
      } catch (telegramError) {
        console.error("‚ùå Telegram cancellation notification error:", telegramError)
      }
    }

    console.log("‚úÖ Appointment cancelled:", appointment.bookingCode)

    return {
      success: true,
      message: "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞",
    }
  } catch (error) {
    console.error("Error cancelling appointment:", error)
    return {
      success: false,
      message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏",
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —É—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π)
export async function getAvailableSlots(date: Date) {
  try {
    await connectDB()

    const startOfDay = new Date(date)
    startOfDay.setHours(0, 0, 0, 0)
    const endOfDay = new Date(date)
    endOfDay.setHours(23, 59, 59, 999)

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    const bookedAppointments = await Appointment.find({
      preferredDate: {
        $gte: startOfDay,
        $lte: endOfDay,
      },
      status: "active", // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    }).select("preferredTime")

    const bookedSlots = bookedAppointments.map((apt) => apt.preferredTime)

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    const availableSlots = ALL_TIME_SLOTS.filter((slot) => !bookedSlots.includes(slot))

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ
    const now = new Date()
    const isToday =
      date.getDate() === now.getDate() && date.getMonth() === now.getMonth() && date.getFullYear() === now.getFullYear()

    let filteredSlots = availableSlots
    if (isToday) {
      const currentTime = now.getHours() * 60 + now.getMinutes()
      filteredSlots = availableSlots.filter((slot) => {
        const [hours, minutes] = slot.split(":").map(Number)
        const slotTime = hours * 60 + minutes
        return slotTime > currentTime + 30 // –ú–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç –¥–æ –∑–∞–ø–∏—Å–∏
      })
    }

    return {
      success: true,
      availableSlots: filteredSlots,
      totalSlots: ALL_TIME_SLOTS.length,
      bookedSlots: bookedSlots.length,
    }
  } catch (error) {
    console.error("Error fetching available slots:", error)
    return {
      success: false,
      availableSlots: [],
      totalSlots: ALL_TIME_SLOTS.length,
      bookedSlots: 0,
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç—ã—Ö –¥–∞—Ç (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —É—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π)
export async function getFullyBookedDates() {
  try {
    await connectDB()

    const today = new Date()
    const sixMonthsLater = new Date()
    sixMonthsLater.setMonth(today.getMonth() + 6)

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–∞–º
    const bookingsByDate = await Appointment.aggregate([
      {
        $match: {
          preferredDate: {
            $gte: today,
            $lte: sixMonthsLater,
          },
          status: "active", // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        },
      },
      {
        $group: {
          _id: {
            $dateToString: {
              format: "%Y-%m-%d",
              date: "$preferredDate",
            },
          },
          count: { $sum: 1 },
        },
      },
      {
        $match: {
          count: { $gte: ALL_TIME_SLOTS.length }, // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç—ã–µ –¥–Ω–∏
        },
      },
    ])

    const fullyBookedDates = bookingsByDate.map((item) => item._id)

    return {
      success: true,
      dates: fullyBookedDates,
    }
  } catch (error) {
    console.error("Error fetching fully booked dates:", error)
    return {
      success: false,
      dates: [],
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–∏—Å–µ–π
export async function getBookingStats() {
  try {
    await connectDB()

    const today = new Date()
    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1)
    const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0)

    const stats = await Appointment.aggregate([
      {
        $match: {
          createdAt: {
            $gte: startOfMonth,
            $lte: endOfMonth,
          },
        },
      },
      {
        $group: {
          _id: null,
          totalAppointments: { $sum: 1 },
          activeAppointments: {
            $sum: { $cond: [{ $eq: ["$status", "active"] }, 1, 0] },
          },
          cancelledAppointments: {
            $sum: { $cond: [{ $eq: ["$status", "cancelled"] }, 1, 0] },
          },
          uniqueClients: { $addToSet: "$phone" },
        },
      },
      {
        $project: {
          totalAppointments: 1,
          activeAppointments: 1,
          cancelledAppointments: 1,
          uniqueClients: { $size: "$uniqueClients" },
        },
      },
    ])

    return {
      success: true,
      stats: stats[0] || {
        totalAppointments: 0,
        activeAppointments: 0,
        cancelledAppointments: 0,
        uniqueClients: 0,
      },
    }
  } catch (error) {
    console.error("Error fetching booking stats:", error)
    return {
      success: false,
      stats: {
        totalAppointments: 0,
        activeAppointments: 0,
        cancelledAppointments: 0,
        uniqueClients: 0,
      },
    }
  }
}
